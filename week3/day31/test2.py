#-*-coding:utf-8-*-
import sys
#test2
#思考:在py2里面
#1.为什么在2里面我打印一个汉字就报错,但是加上coding就好了,这个东西是给谁看的?
#答:python2.7的解释器看的,(为什么要给他看)这是因为py2里面默认编码方式是assci,(什么叫默认的编码方式呢)当我们去执行这个文件的时候,从上至下执行,当执行到第一行的时候知道我要用哪种方式去进行编码,因为2.7不认中文,默认用assci,assci解析不了中文字符,所以
#要加声明
#2.我这个文件保存的时候现在存在我的磁盘里面,里面存的是什么内容?,
#答:按utf8转码/GBK转码转成bytes类型
#3. 存完之后我执行的时候肯定是放在内存里面的,那么内存里的内容跟我放在磁盘里的内容是不是完全一样的?
#答:一旦运行这个文件,第一件事情就是把内容从磁盘移到内存,这件事情不是解释器做的,是OS做的(移到内存里面的是什么?)这段时间OS什么都不干,他会把这个文本原封不动的放到内存里面,这个时候内存里是bytes(比如按utf8存的,那他其实就是bytes数据,放到内存里面),
#只要涉及到硬件都是OS做的,接下来解释器(在PY3中用UTF8读),到底接下来他干了什么?(这个.py文件内容是CPU执行的(肯定是0101的数据,他的上一层在上一层是unicode编码?因为他是万国码)),解释器解释的是一堆utf8数据,先decode成unicode,在去通过unicode做数据转化交给CPU执行
#例如:a = 1+1 s ='袁浩',  那现在存到磁盘是UTF8,OS转到内存也是UTF8,解释器解释的时候把它变成了unicode,这个时候CPU才能针对这个unicode去执行,
#

#print(sys.getdefaultencoding()) #2里面是ascii 3里面是utf8 获取默认的编码方式


#加上utf8一定能运行吗?
#答:我们这个(coding:utf8)是为了告诉解释器,下面的内容用utf8进行编码解码,前提是你本身这个文本是utf8才行
#现在这个文件我点了保存,那么这个文件在我磁盘里面存储的数据类型是用的bytes,但是是按utf8还是按什么,是按utf8取决于
#pycharm 右下面有个utf8,是为了写这个文件保存的时候,以什么格式存起来



#####上一次编码问题 (不懂参考32天的)
#CPU只有在执行的时候才会会把这个内容(print(b'hello'))存储到某个内存地址(存成一个bytes数据),但是在执行之前CPU只能识别的就是unicode
#总之:这些内存里面想被cpu执行必须存成unicode,这样的话,最后当CPU执行时候,(这个字符串)该归置成unicode就是unicode,是bytes就归置成bytes,print它相当于执行它


#额外问题
#32位OS,4G内存,user只能占3个G,还有1G属于OS,OS也是软件,他是一个包含软件的软件,它也有一个自己的内存区叫内核区,只能OS自己用,谁都不能占用,只能OS自己用